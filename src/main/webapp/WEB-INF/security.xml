<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">


	<!-- Enable method level Spring Security by annotations -->
	<global-method-security pre-post-annotations="enabled" />
	<!-- jsr250-annotations="enabled" access-decision-manager-ref="accessDecisionManager" -->

<!-- New Code try -->

<!-- <beans:bean id="concurrencyFilter"
   class="org.springframework.security.web.session.ConcurrentSessionFilter">
  <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
  <beans:constructor-arg name="expiredUrl" value="/multipleLogins.xhtml" />
  this permits redirection to session timeout page from javascript/ajax or http
   <beans:property name="redirectStrategy" ref="jsfRedirectStrategy" />
</beans:bean> -->


<beans:bean id="myAuthFilter" class=
   "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
  <beans:property name="sessionAuthenticationStrategy" ref="sas" />
  <beans:property name="authenticationManager" ref="authenticationManager" />
</beans:bean>

<!-- <beans:bean id="sas" class=
 "org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
  <beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
  <beans:property name="maximumSessions" value="1" />
  <beans:property name="exceptionIfMaximumExceeded" value="true" />
</beans:bean> -->
<beans:bean id="sas" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
<beans:constructor-arg>
	<beans:list>
	<beans:bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
		<beans:constructor-arg ref="sessionRegistry"/>
		<beans:property name="maximumSessions" value="1" />
		<beans:property name="exceptionIfMaximumExceeded" value="true" />
	</beans:bean>
	<beans:bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy">
	</beans:bean>
	<beans:bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
		<beans:constructor-arg ref="sessionRegistry"/>
	</beans:bean>
	</beans:list>
</beans:constructor-arg>
</beans:bean>



<beans:bean id="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
    <beans:constructor-arg  value="/Views/Unsecured/Login/index.xhtml" />
    <!-- <beans:property name="loginFormUrl" value="/index.xhtml"/> -->
</beans:bean>

<!-- New code 3  -->
<beans:bean id="sessionManagementFilter"
    class="org.springframework.security.web.session.SessionManagementFilter">
    <beans:constructor-arg ref="httpSessionSecurityContextRepository" />
    <beans:constructor-arg ref="sas" />
    <beans:property name="invalidSessionStrategy" ref="invalidSessionStrategy" />
</beans:bean>
	<!-- redirection strategy -->
<beans:bean id="invalidSessionStrategy" class="com.Beendo.Configuration.JsfRedirectStrategy">
<beans:constructor-arg value="/Views/Unsecured/Login/index.xhtml" /> 
</beans:bean>

<beans:bean id="httpSessionSecurityContextRepository" class="org.springframework.security.web.context.HttpSessionSecurityContextRepository"/>

<!--  -->


<!-- <beans:bean id="sessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter">
    <beans:constructor-arg ref="httpSessionSecurityContextRepository" />
    <beans:constructor-arg ref="mySessionAuthenticationStrategy" />
    <beans:property name="invalidSessionStrategy" ref="jsfRedirectStrategy" />
</beans:bean> -->


<!-- <http security="none" pattern="/javax.faces.resource/**">

</http> -->
	
<!--  -->
	<http entry-point-ref="loginUrlAuthenticationEntryPoint"   auto-config="false" use-expressions="true">
		<csrf disabled="true" />
		
 <!-- <custom-filter position="CONCURRENT_SESSION_FILTER" ref="concurrencyFilter" /> -->
  <custom-filter position="FORM_LOGIN_FILTER" ref="myAuthFilter" />
  <!-- <session-management session-authentication-strategy-ref="sas"/> -->
		
  <custom-filter   before="SESSION_MANAGEMENT_FILTER" ref="sessionManagementFilter"/>	
 <!-- 		<intercept-url pattern="/javax.faces.resource/**"
			access="permitAll" />
		<intercept-url pattern="/Views/Unsecured/Login/*"
			access="permitAll" /> -->
		<intercept-url pattern="/Views/Unsecured/**" access="permitAll" />
		<!-- <intercept-url pattern="/Views/**" access="permitAll" /> -->
	
		<intercept-url pattern="/Views/Secured/Entity/*"
			access="hasAnyRole('ROLE_ROOT_ADMIN', 'ROLE_ROOT_USER')" />
		<intercept-url pattern="/Views/Secured/Payer/*"
			access="hasAnyRole('ROLE_ROOT_ADMIN', 
		'ROLE_ROOT_USER','ROLE_ENTITY_ADMIN')" />
		<intercept-url pattern="/Views/Secured/User/*"
			access="hasAnyRole('ROLE_ROOT_ADMIN', 'ROLE_ROOT_USER','ROLE_ENTITY_ADMIN')" />
	<intercept-url pattern="/Views/Secured/**"
			access="isAuthenticated()" />
<!-- 		 <form-login  authentication-failure-url="/Views/Unsecured/Login/index.xhtml"
		 login-page="/Views/Unsecured/Login/index.xhtml" />
		 
		<logout invalidate-session="true"  delete-cookies="JSESSIONID"
			logout-url="/Views/Unsecured/logout.xhtml"  />
  		<session-management session-authentication-strategy-ref="mySessionAuthenticationStrategy"
  		  invalid-session-url="/Views/Unsecured/Login/index.xhtml">
  		  
  		  <concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>
  		   </session-management>
 --> 
 
  		<!-- <session-management session-fixation-protection="none"/> -->
 
	</http>

	<authentication-manager id="authenticationManager">
		<authentication-provider user-service-ref="userService">
			<password-encoder hash="plaintext">
			</password-encoder>
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="mySessionAuthenticationStrategy" class="com.Beendo.Security.MySessionAuthStrategy">
    <beans:constructor-arg ref="sessionRegistry"/>
     <beans:property name="maximumSessions" value="1" />
  <beans:property name="exceptionIfMaximumExceeded" value="true" />
</beans:bean>
	
	<beans:bean id="sessionRegistry"
      class="org.springframework.security.core.session.SessionRegistryImpl" />
	
	<!-- <beans:bean id="myAuthFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<beans:property name="sessionAuthenticationStrategy"
			ref="sas" />
			
				<beans:bean id="sessionFixationProtectionStrategy"
		class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" />
			
			
	</beans:bean>

	 -->

	<!-- Secutiy New Code -->

	<!-- <beans:bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy"> 
		<filter-chain-map request-matcher="ant"> <filter-chain pattern="/images/*" 
		filters="none" /> <filter-chain pattern="/resources/**" filters="none" /> 
		<filter-chain pattern="/**" filters=" securityContextPersistenceFilter, basicAuthenticationFilter, 
		filterSecurityInterceptor" /> </filter-chain-map> logoutFilter,exceptionTranslationFilter, 
		</beans:bean> -->


<!-- 	<beans:bean id="filterSecurityInterceptor"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
		<beans:property name="accessDecisionManager" ref="accessDecisionManager"></beans:property>
		<beans:property name="securityMetadataSource" ref="metaDataSource"></beans:property>
		<beans:property name="validateConfigAttributes" value="true" />
	</beans:bean>
	End

	<beans:bean id="basicAuthenticationFilter"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<beans:constructor-arg>
			<beans:ref bean="authenticationManager" />
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="metaDataSource"
		class="com.Beendo.Security.MyFilterSecurityMetadataSource" />

	<beans:bean id="securityContextPersistenceFilter"
		class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />

	<beans:bean id="configAttributeImpl" class="com.Beendo.Security.ConfigAttributeImpl"
		scope="prototype" />
	<beans:bean id="customInterceptFilter" class="com.Beendo.Security.CustomFilterSecurityInterceptor"></beans:bean>


	<beans:bean id="roleVoter" class="com.Beendo.Security.HierarchicalJsr250Voter">
		<beans:constructor-arg>
			<beans:ref bean="customRoleHierarchy" />
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="customRoleHierarchy" class="com.Beendo.Security.CustomRoleHierachy"></beans:bean>


	<beans:bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.UnanimousBased">

		<beans:constructor-arg>

			<beans:list>
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:ref bean="roleVoter" />
			</beans:list>
		</beans:constructor-arg>

	</beans:bean> -->

</beans:beans>
